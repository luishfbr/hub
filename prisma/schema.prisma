datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
  CREATOR
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  otpSecret     String?
  otpEnabled    Boolean         @default(false)
  role          Role            @default(USER)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sectors   Sector[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Sector {
  id   String @id @default(cuid())
  name String @unique

  users     User[]
  templates FileTemplate[]
}

model FileTemplate {
  id        String @id @default(cuid())
  modelName String
  sector    Sector @relation(onDelete: Cascade, fields: [sectorId], references: [id])

  fields   Field[]
  files    File[]
  sectorId String
}

model Field {
  id             String       @id @default(cuid())
  fieldType      FieldType
  fieldLabel     String
  fileTemplate   FileTemplate @relation(onDelete: Cascade, fields: [fileTemplateId], references: [id])
  fileTemplateId String
  File           File[]
}

enum FieldType {
  nomecompleto
  cpf
  cnpj
  datadeadmissao
  dataderecisao
  data
  dia
  mes
  ano
  prateleira
  caixa
  pasta
  imported
}

model File {
  id             String @id @default(cuid())
  value          String
  fileTemplateId String
  fieldId        String
  commonId       String

  field Field @relation(onDelete: Cascade, fields: [fieldId], references: [id])

  FileTemplate FileTemplate? @relation(fields: [fileTemplateId], references: [id])
}

